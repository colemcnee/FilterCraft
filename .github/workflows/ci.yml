name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  DEVELOPER_DIR: /Applications/Xcode_15.1.app/Contents/Developer

jobs:
  swift-package-tests:
    name: Swift Package Tests
    runs-on: macos-14
    strategy:
      matrix:
        swift-version: ['5.8', '5.9']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Select Swift version
      run: |
        sudo xcode-select -s /Applications/Xcode_15.1.app/Contents/Developer
        swift --version
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          .build
          Packages/FilterCraftCore/.build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Run FilterCraftCore tests
      run: |
        cd Packages/FilterCraftCore
        swift test --enable-code-coverage --parallel
    
    - name: Generate code coverage report
      run: |
        cd Packages/FilterCraftCore
        xcrun llvm-cov export -format="lcov" \
          .build/debug/FilterCraftCorePackageTests.xctest/Contents/MacOS/FilterCraftCorePackageTests \
          -instr-profile .build/debug/codecov/default.profdata > coverage.lcov
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./Packages/FilterCraftCore/coverage.lcov
        flags: swift-package
        name: FilterCraftCore
        fail_ci_if_error: false

  ios-build-test:
    name: iOS Build & Test
    runs-on: macos-14
    strategy:
      matrix:
        xcode: ['15.0', '15.1']
        ios-version: ['17.0', '17.2']
        include:
          - xcode: '15.0'
            ios-simulator: 'iPhone 14'
          - xcode: '15.1' 
            ios-simulator: 'iPhone 15'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer
    
    - name: Cache derived data
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-ios-derived-data-${{ matrix.xcode }}-${{ hashFiles('**/*.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-ios-derived-data-${{ matrix.xcode }}-
    
    - name: List available simulators
      run: xcrun simctl list devices available
    
    - name: Create iOS simulator
      run: |
        DEVICE_ID=$(xcrun simctl create "CI-iPhone" "com.apple.CoreSimulator.SimDeviceType.${{ matrix.ios-simulator }}" "com.apple.CoreSimulator.SimRuntime.iOS-${{ matrix.ios-version }}")
        xcrun simctl boot "$DEVICE_ID"
        echo "SIMULATOR_ID=$DEVICE_ID" >> $GITHUB_ENV
    
    - name: Build iOS app
      run: |
        xcodebuild build \
          -scheme FilterCraft-iOS \
          -destination "id=${{ env.SIMULATOR_ID }}" \
          -configuration Debug \
          -quiet \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE=""
    
    - name: Run iOS unit tests
      run: |
        xcodebuild test \
          -scheme FilterCraft-iOS \
          -destination "id=${{ env.SIMULATOR_ID }}" \
          -configuration Debug \
          -enableCodeCoverage YES \
          -quiet \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE=""
    
    - name: Run iOS UI tests
      run: |
        xcodebuild test \
          -scheme FilterCraft-iOS-UITests \
          -destination "id=${{ env.SIMULATOR_ID }}" \
          -configuration Debug \
          -quiet \
          CODE_SIGNING_ALLOWED=NO \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE="" || true
    
    - name: Generate iOS coverage report
      run: |
        xcrun xccov view --report --json DerivedData/Build/ProfileData/*/Coverage.profdata > ios-coverage.json || true
    
    - name: Upload iOS artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: ios-build-logs-${{ matrix.xcode }}
        path: |
          ~/Library/Developer/Xcode/DerivedData/**/Logs/**
          ios-coverage.json
        retention-days: 7

  macos-build-test:
    name: macOS Build & Test  
    runs-on: macos-14
    strategy:
      matrix:
        xcode: ['15.0', '15.1']
        macos-version: ['13.0', '14.0']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer
    
    - name: Cache derived data
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-macos-derived-data-${{ matrix.xcode }}-${{ hashFiles('**/*.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-macos-derived-data-${{ matrix.xcode }}-
    
    - name: Build macOS app
      run: |
        xcodebuild build \
          -scheme FilterCraft-macOS \
          -destination "platform=macOS" \
          -configuration Debug \
          -quiet
    
    - name: Run macOS unit tests
      run: |
        xcodebuild test \
          -scheme FilterCraft-macOS \
          -destination "platform=macOS" \
          -configuration Debug \
          -enableCodeCoverage YES \
          -quiet
    
    - name: Generate macOS coverage report
      run: |
        xcrun xccov view --report --json DerivedData/Build/ProfileData/*/Coverage.profdata > macos-coverage.json || true
    
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: macos-build-logs-${{ matrix.xcode }}
        path: |
          ~/Library/Developer/Xcode/DerivedData/**/Logs/**
          macos-coverage.json
        retention-days: 7

  code-quality:
    name: Code Quality Checks
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        swiftlint version
    
    - name: Run SwiftLint
      run: |
        swiftlint lint --reporter github-actions-logging --strict
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: Security audit
      run: |
        # Check for common security issues in Swift projects
        echo "Running security checks..."
        
        # Check for hardcoded credentials
        if grep -r "password\|secret\|key\|token" --include="*.swift" . --exclude-dir=.git; then
          echo "‚ö†Ô∏è  Potential hardcoded credentials found"
          exit 1
        fi
        
        # Check for debug code
        if grep -r "print\|debugPrint\|dump" --include="*.swift" . --exclude-dir=.git --exclude-dir=Tests; then
          echo "‚ÑπÔ∏è  Debug statements found (review recommended)"
        fi
        
        echo "‚úÖ Security checks passed"
    
    - name: Analyze code complexity
      run: |
        # Simple complexity analysis using basic metrics
        echo "Analyzing code complexity..."
        
        find . -name "*.swift" -not -path "./.build/*" -not -path "./DerivedData/*" | while read file; do
          lines=$(wc -l < "$file")
          if [ $lines -gt 500 ]; then
            echo "‚ö†Ô∏è  Large file: $file ($lines lines)"
          fi
        done
        
        echo "‚úÖ Complexity analysis complete"

  performance-tests:
    name: Performance Tests
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run performance benchmarks
      run: |
        # Run FilterCraftCore performance tests
        cd Packages/FilterCraftCore
        swift test --filter PerformanceTests --parallel || true
    
    - name: Monitor build times
      run: |
        echo "Build time monitoring..."
        START_TIME=$(date +%s)
        
        xcodebuild build \
          -scheme FilterCraft-iOS \
          -destination "platform=iOS Simulator,name=iPhone 15" \
          -configuration Debug \
          -quiet \
          CODE_SIGNING_ALLOWED=NO || true
        
        END_TIME=$(date +%s)
        BUILD_TIME=$((END_TIME - START_TIME))
        
        echo "iOS build time: ${BUILD_TIME}s"
        echo "ios_build_time=${BUILD_TIME}" >> $GITHUB_ENV
    
    - name: Memory usage analysis  
      run: |
        echo "Memory usage analysis..."
        # This would typically run instruments or other profiling tools
        # For now, just document the intention
        echo "üìä Memory profiling would run here in production environment"

  dependency-check:
    name: Dependency Security Check
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check Swift package dependencies
      run: |
        cd Packages/FilterCraftCore
        swift package show-dependencies --format json > dependencies.json
        
        # Check for known vulnerable packages (basic implementation)
        echo "Checking dependencies for known issues..."
        
        if [ -f Package.resolved ]; then
          echo "‚úÖ Package.resolved found - dependencies are locked"
        else
          echo "‚ö†Ô∏è  No Package.resolved - dependencies may vary"
        fi
    
    - name: Outdated dependency check
      run: |
        echo "Checking for outdated dependencies..."
        cd Packages/FilterCraftCore
        swift package show-dependencies || true

  results:
    name: CI Results
    runs-on: ubuntu-latest
    needs: [swift-package-tests, ios-build-test, macos-build-test, code-quality, performance-tests, dependency-check]
    if: always()
    
    steps:
    - name: Check CI results
      run: |
        echo "CI Pipeline Results:"
        echo "Swift Package Tests: ${{ needs.swift-package-tests.result }}"
        echo "iOS Build & Test: ${{ needs.ios-build-test.result }}"
        echo "macOS Build & Test: ${{ needs.macos-build-test.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Performance Tests: ${{ needs.performance-tests.result }}"
        echo "Dependency Check: ${{ needs.dependency-check.result }}"
        
        if [[ "${{ needs.swift-package-tests.result }}" == "failure" || 
              "${{ needs.ios-build-test.result }}" == "failure" || 
              "${{ needs.macos-build-test.result }}" == "failure" || 
              "${{ needs.code-quality.result }}" == "failure" ]]; then
          echo "‚ùå CI pipeline failed"
          exit 1
        else
          echo "‚úÖ CI pipeline passed"
        fi