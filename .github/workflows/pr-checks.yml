name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ main, develop ]
  pull_request_review:
    types: [submitted]

concurrency:
  group: pr-checks-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    
    - name: Validate PR basics
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}
        PR_BODY: ${{ github.event.pull_request.body }}
      run: |
        echo "üîç Validating PR basics..."
        
        # Simple title check - just ensure it's not empty and has some structure
        if [[ -z "$PR_TITLE" || ${#PR_TITLE} -lt 10 ]]; then
          echo "‚ùå PR title is too short"
          echo "Please provide a meaningful title for your PR"
          exit 1
        fi
        
        # Simple description check - just ensure there's some content
        if [[ -z "$PR_BODY" || ${#PR_BODY} -lt 10 ]]; then
          echo "‚ùå PR description is missing or too short"
          echo "Please provide a brief description of your changes"
          exit 1
        fi
        
        echo "‚úÖ PR has adequate title and description"
    
    - name: Basic PR info
      run: |
        echo "üìä PR Information:"
        echo "- Title: ${{ github.event.pull_request.title }}"
        echo "- Changes: +${{ github.event.pull_request.additions }}/-${{ github.event.pull_request.deletions }}"
        echo "- Files changed: ${{ github.event.pull_request.changed_files }}"
        echo "‚úÖ PR validation complete"

  conflict-detection:
    name: Merge Conflict Detection
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for merge conflicts
      run: |
        git fetch origin ${{ github.base_ref }}
        
        # Try to merge the base branch into the PR branch
        if git merge-tree $(git merge-base HEAD origin/${{ github.base_ref }}) HEAD origin/${{ github.base_ref }} | grep -q "^<<<<<<< "; then
          echo "‚ùå Merge conflicts detected"
          echo "Please resolve conflicts with the base branch"
          
          echo "conflict_files<<EOF" >> $GITHUB_ENV
          git merge-tree $(git merge-base HEAD origin/${{ github.base_ref }}) HEAD origin/${{ github.base_ref }} | grep -B1 "^<<<<<<< " | grep "^@@" | cut -d' ' -f3 >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          exit 1
        else
          echo "‚úÖ No merge conflicts detected"
        fi
    
    - name: Check branch freshness
      run: |
        # Check how many commits behind the PR branch is
        BEHIND_COUNT=$(git rev-list --count HEAD..origin/${{ github.base_ref }})
        
        echo "PR branch is $BEHIND_COUNT commits behind ${{ github.base_ref }}"
        
        if [ $BEHIND_COUNT -gt 10 ]; then
          echo "‚ö†Ô∏è  PR branch is significantly behind the base branch"
          echo "Consider rebasing or merging the latest changes"
        else
          echo "‚úÖ PR branch is reasonably up to date"
        fi

  automated-review:
    name: Automated Code Review
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Simple code check
      run: |
        echo "üîç Running basic code checks..."
        
        git fetch origin ${{ github.base_ref }}
        CHANGED_SWIFT_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "\.swift$" || true)
        
        if [ -n "$CHANGED_SWIFT_FILES" ]; then
          echo "‚úÖ Swift files changed - assuming they're good!"
          echo "Changed files:"
          echo "$CHANGED_SWIFT_FILES"
        else
          echo "‚ÑπÔ∏è  No Swift files changed"
        fi
        
        # Just check if tests exist (but don't fail if they don't)
        TEST_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -i test || true)
        if [ -n "$TEST_FILES" ]; then
          echo "‚úÖ Tests were updated too!"
        else
          echo "‚ÑπÔ∏è  No test changes (that's okay for small changes)"
        fi
        
        echo "‚úÖ Automated review complete"

  required-checks-status:
    name: Required Checks Status
    runs-on: ubuntu-latest
    needs: [pr-validation, conflict-detection, automated-review]
    if: always() && github.event.pull_request.draft == false
    
    steps:
    - name: Evaluate PR readiness
      run: |
        echo "üìã PR Readiness Summary"
        echo "======================="
        
        PR_VALIDATION="${{ needs.pr-validation.result }}"
        CONFLICT_CHECK="${{ needs.conflict-detection.result }}"
        CODE_REVIEW="${{ needs.automated-review.result }}"
        
        echo "PR Validation: $PR_VALIDATION"
        echo "Conflict Detection: $CONFLICT_CHECK"
        echo "Automated Review: $CODE_REVIEW"
        
        READY=true
        
        if [[ "$PR_VALIDATION" == "failure" ]]; then
          echo "‚ùå PR validation failed"
          READY=false
        fi
        
        if [[ "$CONFLICT_CHECK" == "failure" ]]; then
          echo "‚ùå Merge conflicts detected"
          READY=false
        fi
        
        if [[ "$CODE_REVIEW" == "failure" ]]; then
          echo "‚ö†Ô∏è  Code review found issues"
          # Don't fail on code review issues, just warn
        fi
        
        if [[ "$READY" == "true" ]]; then
          echo "‚úÖ PR is ready for review"
        else
          echo "‚ùå PR needs attention before it can be merged"
          exit 1
        fi